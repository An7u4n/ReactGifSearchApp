{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","undefined","trim","length","i","cats","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAAiB,EACzBC,mBAAS,IADgB,mBACtDC,EADsD,KAC1CC,EAD0C,KA4B7D,OACC,0BAAMC,SArBc,SAACC,GAIrB,GAHAA,EAAEC,sBAGiBC,IAAfL,GAA2C,KAAfA,GAAoC,OAAfA,GAAuBA,EAAWM,OAAOC,OAAS,EACtG,OAAO,EAIR,IAAK,IAAIC,EAAI,EAAGA,GAAKV,EAAWS,OAAQC,IACvC,GAAIV,EAAWU,KAAOR,EACrB,OAAO,EAITH,GAAc,SAACY,GAAD,OAAWT,GAAX,mBAA0BS,OAExCR,EAAc,MAKb,2BACCS,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACT,IA7BY,SAACA,GAC1BF,EAAcE,EAAEU,OAAOF,OA6BpBG,CAAkBX,Q,uBCrCVY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAAM,mFAAqFC,UAAUH,GAAY,YAFjG,SAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXd,kBAefM,GAfe,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACpC,OACC,yBAAKc,UAAU,QACd,4BAAKJ,GACL,yBAAKK,IAAKf,EAAKgB,IAAKN,MCFVO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACfjB,mBAAS,CAClCwB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAiBzC,OAXAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAAChB,GACvBiB,YAAW,WACVH,EAAS,CACRf,KAAMC,EACNY,SAAS,MAER,UAEF,CAACpB,IAEGqB,EDf2BK,CAAa1B,GAAjCa,EAD0B,EAChCN,KAAca,EADkB,EAClBA,QAkBtB,OACC,oCACC,wBAAIJ,UAAU,kBAAkBhB,GAE/BoB,GAAW,sCAEZ,yBAAKJ,UAAU,qEACbH,EAAOJ,KAAI,SAACkB,GAAD,OACX,kBAAC,EAAD,eAAaC,IAAKD,EAAMhB,IAAQgB,UEDtBE,EA1BM,WAAM,MAEU9C,mBAAS,CAAC,eAFpB,mBAEnBD,EAFmB,KAEPD,EAFO,KAQ1B,OACC,oCACC,4CACA,kBAAC,EAAD,CAAaA,cAAeA,EAAeC,WAAYA,IACvD,6BAGA,6BAEEA,EAAW2B,KAAI,SAACT,GAAD,OAEf,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UClBvC8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.c4dfa998.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories, categories }) => {\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\t//\tMake the input work\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t//\tDeny upload for the content\r\n\t\tif (inputValue === undefined || inputValue === '' || inputValue === null || inputValue.trim().length < 3) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//\tDeny upload if already exists\r\n\t\tfor (let i = 0; i <= categories.length; i++) {\r\n\t\t\tif (categories[i] === inputValue) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//\tUpdate categories\r\n\t\tsetCategories((cats) => [inputValue, ...cats]);\r\n\t\t//\tPut the input blank\r\n\t\tsetInputValue('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\thandleInputChange(e);\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n\tcategories: PropTypes.array.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n\t//  Get the data\r\n\tconst url = 'https://api.giphy.com/v1/gifs/search?api_key=pnnOp1vpp4itiK7ZlbMXyVxV1t4I81JJ&q=' + encodeURI(category) + '&limit=10';\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\r\n\t//  Get the important things of the request\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\r\n\treturn gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\treturn (\r\n\t\t<div className=\"card\">\r\n\t\t\t<h4>{title}</h4>\r\n\t\t\t<img src={url} alt={title} />\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\t//  Esto hace que solo se renderice una sola vez\r\n\r\n\t// useEffect(() => {\r\n\t//Como getGifs() es asyncrono retorna una promesa y\r\n\t//para llamar a la funcion set images deberiamos hacerlos de\r\n\t//estas maneras\r\n\r\n\t// getGifs(category).then((gifs) => setimages(gifs));\r\n\t// \tgetGifs(category).then(setimages);\r\n\t// }, [category]);\r\n\r\n\t//\tPongo category aca para eliminar un warning\r\n\t//  Lo que hace es que cuando category cambia se ejecuta el codigo\r\n\r\n\t//  Creo una funcion asincrona\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"category-title\">{category}</h3>\r\n\r\n\t\t\t{loading && <p>Loading</p>}\r\n\r\n\t\t\t<div className=\"card-grid animate__animated animate__delay-1s animate__backInDown\">\r\n\t\t\t\t{images.map((image) => (\r\n\t\t\t\t\t<GifGridItem key={image.id} {...image} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((gifs) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetstate({\r\n\t\t\t\t\tdata: gifs,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t}, 500);\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state; // { data:[], loading: true }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\t//\tCreate categories\r\n\tconst [categories, setCategories] = useState(['South Park']);\r\n\r\n\t// const handleAdd = () => {\r\n\t// \tsetCategories((cats) => [...cats, 'Mamichula']);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} categories={categories} />\r\n\t\t\t<hr />\r\n\r\n\t\t\t{/* Print Categories */}\r\n\t\t\t<div>\r\n\t\t\t\t{/* hago un bucle y seteo cada category por interaccion */}\r\n\t\t\t\t{categories.map((category) => (\r\n\t\t\t\t\t// por cada category creo un componente y le mando la key y la category\r\n\t\t\t\t\t<GifGrid key={category} category={category} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}